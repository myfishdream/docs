import{_ as a,c as l,a2 as t,G as i,B as o,o as r}from"./chunks/framework.BhYLs7xu.js";const R=JSON.parse('{"title":"博客搭建","description":"","frontmatter":{},"headers":[],"relativePath":"word/VitePress博客搭建/note.md","filePath":"word/VitePress博客搭建/note.md"}'),n={name:"word/VitePress博客搭建/note.md"};function p(d,e,c,h,g,u){const s=o("Giscus");return r(),l("div",null,[e[0]||(e[0]=t(`<h1 id="博客搭建" tabindex="-1">博客搭建 <a class="header-anchor" href="#博客搭建" aria-label="Permalink to &quot;博客搭建&quot;">​</a></h1><p><a target="_blank" href="https://www.bilibili.com/video/BV1XW4y1w7bc?vd_source=3e46d32094b981673e11bfbadc3d8bf1">手把手教你使用vitepress搭建并部署一个自己的知识库（无需服务器）</a></p><h1 id="分享较大文件" tabindex="-1">分享较大文件 <a class="header-anchor" href="#分享较大文件" aria-label="Permalink to &quot;分享较大文件&quot;">​</a></h1><p>如果你需要分享较大的文件或版本化的资源，可以使用 GitHub Releases：</p><ol><li>在仓库页面，点击 <code>Releases</code> -&gt; <code>Create a new release</code>。</li><li>填写版本号、标题和描述，然后上传文件到 <code>Attach binaries</code> 区域。</li><li>发布后，文件的下载链接会显示在 Release 页面中，可以直接通过 <code>&lt;a&gt;</code> 标签链接下载。</li></ol><p><strong>GitHub Releases</strong> 是 GitHub 提供的一个功能，用于管理和分发软件的特定版本（如稳定版、测试版等）。它允许开发者将编译好的二进制文件、安装包、源代码打包文件等与版本号关联，并提供一个清晰的界面供用户下载和使用。</p><p>以下是 GitHub Releases 的原理和核心功能：</p><hr><h3 id="_1-releases-的核心概念" tabindex="-1"><strong>1. Releases 的核心概念</strong> <a class="header-anchor" href="#_1-releases-的核心概念" aria-label="Permalink to &quot;**1. Releases 的核心概念**&quot;">​</a></h3><ul><li><strong>版本号</strong>：每个 Release 都与一个版本号（如 <code>v1.0.0</code>）关联，遵循语义化版本控制（Semantic Versioning）。</li><li><strong>发布说明</strong>：每个 Release 可以包含详细的发布说明（Release Notes），描述新功能、修复的 Bug 等。</li><li><strong>附加文件</strong>：开发者可以上传与版本相关的文件（如二进制文件、安装包、文档等），供用户下载。</li><li><strong>Git 标签</strong>：每个 Release 都基于一个 Git 标签（Tag），标签指向特定的提交（Commit），确保 Release 与代码的某个状态绑定。</li></ul><hr><h3 id="_2-releases-的工作原理" tabindex="-1"><strong>2. Releases 的工作原理</strong> <a class="header-anchor" href="#_2-releases-的工作原理" aria-label="Permalink to &quot;**2. Releases 的工作原理**&quot;">​</a></h3><ol><li><p><strong>创建标签</strong>：</p><ul><li><p>开发者通过 Git 命令创建一个标签（Tag），并将其推送到 GitHub 仓库。</p></li><li><p>例如：</p><p>bash</p><p>复制</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git tag v1.0.0</span></span>
<span class="line"><span>git push origin v1.0.0</span></span></code></pre></div></li></ul></li><li><p><strong>创建 Release</strong>：</p><ul><li>在 GitHub 仓库页面，点击 <code>Releases</code> -&gt; <code>Draft a new release</code>。</li><li>选择已有的标签或创建一个新标签。</li><li>填写版本号、标题、发布说明，并上传附加文件（如二进制文件、安装包等）。</li></ul></li><li><p><strong>发布 Release</strong>：</p><ul><li>发布后，GitHub 会生成一个 Release 页面，显示版本号、发布说明和附加文件的下载链接。</li><li>用户可以通过 Release 页面下载文件，或者通过 API 获取 Release 信息。</li></ul></li></ol><hr><h3 id="_3-releases-的优势" tabindex="-1"><strong>3. Releases 的优势</strong> <a class="header-anchor" href="#_3-releases-的优势" aria-label="Permalink to &quot;**3. Releases 的优势**&quot;">​</a></h3><ul><li><strong>版本管理</strong>：清晰地管理软件的各个版本，方便用户下载特定版本。</li><li><strong>附加文件支持</strong>：可以直接上传二进制文件、安装包等，无需用户从源代码编译。</li><li><strong>发布说明</strong>：提供详细的版本更新信息，帮助用户了解新功能和修复内容。</li><li><strong>API 支持</strong>：GitHub 提供了 Releases API，开发者可以通过 API 自动化发布流程。</li></ul><hr><h3 id="_4-releases-的使用场景" tabindex="-1"><strong>4. Releases 的使用场景</strong> <a class="header-anchor" href="#_4-releases-的使用场景" aria-label="Permalink to &quot;**4. Releases 的使用场景**&quot;">​</a></h3><ul><li><strong>分发二进制文件</strong>：将编译好的可执行文件、安装包等与版本绑定，供用户直接下载。</li><li><strong>软件更新</strong>：通过 Releases 发布新版本，用户可以通过更新日志了解变化。</li><li><strong>开源项目发布</strong>：开源项目通常使用 Releases 来管理稳定版本和测试版本。</li><li><strong>持续集成/持续交付（CI/CD）</strong>：与 CI/CD 工具（如 GitHub Actions、Travis CI 等）集成，自动化发布流程。</li></ul><hr><h3 id="_5-releases-的示例" tabindex="-1"><strong>5. Releases 的示例</strong> <a class="header-anchor" href="#_5-releases-的示例" aria-label="Permalink to &quot;**5. Releases 的示例**&quot;">​</a></h3><h4 id="创建-release" tabindex="-1"><strong>创建 Release</strong> <a class="header-anchor" href="#创建-release" aria-label="Permalink to &quot;**创建 Release**&quot;">​</a></h4><ol><li>在 GitHub 仓库页面，点击 <code>Releases</code> -&gt; <code>Draft a new release</code>。</li><li>填写版本号（如 <code>v1.0.0</code>）、标题和发布说明。</li><li>上传附加文件（如 <code>app.zip</code>、<code>installer.exe</code> 等）。</li><li>点击 <code>Publish release</code>。</li></ol><h4 id="release-页面" tabindex="-1"><strong>Release 页面</strong> <a class="header-anchor" href="#release-页面" aria-label="Permalink to &quot;**Release 页面**&quot;">​</a></h4><p>发布后，Release 页面会显示以下内容：</p><ul><li>版本号（如 <code>v1.0.0</code>）。</li><li>发布说明（Markdown 格式）。</li><li>附加文件的下载链接（如 <code>app.zip</code>、<code>installer.exe</code>）。</li></ul><h4 id="下载链接示例" tabindex="-1"><strong>下载链接示例</strong> <a class="header-anchor" href="#下载链接示例" aria-label="Permalink to &quot;**下载链接示例**&quot;">​</a></h4><p>用户可以通过以下链接下载文件：</p><p>复制</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/用户名/仓库名/releases/download/v1.0.0/app.zip</span></span></code></pre></div><hr><h3 id="_6-releases-的-api" tabindex="-1"><strong>6. Releases 的 API</strong> <a class="header-anchor" href="#_6-releases-的-api" aria-label="Permalink to &quot;**6. Releases 的 API**&quot;">​</a></h3><p>GitHub 提供了 Releases API，开发者可以通过 API 自动化发布流程。以下是一些常用的 API 端点：</p><ul><li><p><strong>获取 Releases 列表</strong>：</p><p>复制</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /repos/{owner}/{repo}/releases</span></span></code></pre></div></li><li><p><strong>创建 Release</strong>：</p><p>复制</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST /repos/{owner}/{repo}/releases</span></span></code></pre></div></li><li><p><strong>上传附加文件</strong>：</p><p>复制</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST /repos/{owner}/{repo}/releases/{release_id}/assets</span></span></code></pre></div></li></ul><hr><h3 id="_7-注意事项" tabindex="-1"><strong>7. 注意事项</strong> <a class="header-anchor" href="#_7-注意事项" aria-label="Permalink to &quot;**7. 注意事项**&quot;">​</a></h3><ul><li><strong>文件大小限制</strong>：单个文件不能超过 2 GB，每个 Release 的总文件大小不能超过 2 GB。</li><li><strong>私有仓库</strong>：私有仓库的 Releases 只能被授权用户访问。</li><li><strong>标签管理</strong>：确保标签与代码的提交状态一致，避免发布错误的版本。</li></ul><hr><p>通过 GitHub Releases，开发者可以更专业地管理软件版本，并方便地分发二进制文件和更新日志。</p><h2 id="评论" tabindex="-1">评论 <a class="header-anchor" href="#评论" aria-label="Permalink to &quot;评论&quot;">​</a></h2>`,40)),i(s)])}const _=a(n,[["render",p]]);export{R as __pageData,_ as default};
