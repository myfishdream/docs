import{_ as t,c,a2 as p,G as i,B as d,o as a}from"./chunks/framework.BhYLs7xu.js";const l="/docs/assets/2024-11-26_133742.CqcsGXc9.png",s="/docs/assets/2024-11-26_134748.hjLWNgAu.png",g="/docs/assets/2024-11-26_201745.BcfVCLuv.jpg",r="/docs/assets/2024-11-26_210333.uuZsAa-X.jpg",n="/docs/assets/2024-11-27_212747.CLPBUq5m.jpg",u="/docs/assets/2024-11-27_215627.CfH9ppQk.jpg",h="/docs/assets/2024-11-27_220032.Qs0Aj9XA.jpg",m="/docs/assets/2024-11-27_220237.C2NLo4jN.jpg",b="/docs/assets/2024-11-28_214525.BCuqmf83.jpg",q="/docs/assets/2024-11-28_221940.DcM22es2.jpg",f="/docs/assets/2024-11-28_224107.CEr-wjZe.jpg",S=JSON.parse('{"title":"Git命令","description":"","frontmatter":{},"headers":[],"relativePath":"word/git/Git.md","filePath":"word/git/Git.md"}'),_={name:"word/git/Git.md"};function k(x,e,N,G,P,j){const o=d("Giscus");return a(),c("div",null,[e[0]||(e[0]=p('<h1 id="git命令" tabindex="-1">Git命令 <a class="header-anchor" href="#git命令" aria-label="Permalink to &quot;Git命令&quot;">​</a></h1><p>初始化仓库：<code>git init &lt;project&gt;</code></p><p>显示所以文件：<code>ls -a</code></p><blockquote><p><strong>.git目录</strong>存放了Git仓库的所以数据</p></blockquote><p>查看.git目录:</p><ul><li>​ <code>cd .git</code> ​ <code>ls -altr</code></li></ul><p>删除.git目录：<code>\\rm -rf .git</code></p><p>克隆仓库：<code>git clone url</code></p><p><img src="'+l+'" alt=""></p><h4 id="文件状态" tabindex="-1">文件状态： <a class="header-anchor" href="#文件状态" aria-label="Permalink to &quot;文件状态：&quot;">​</a></h4><ul><li>未跟踪（Untrack）：指新创建的文件，还未被Git管理起来的</li><li>未修改（Unmodified）：指已经被Git管理，但文件内容未发生变化</li><li>已修改（Modified）：指文件内容发生变化，但是还没有添加至暂存区</li><li>已暂存（Staged）：指文件修改后并且已经添加至暂存区的文件</li></ul><p><img src="'+s+'" alt=""></p><ul><li><p><code>git init</code> 创建仓库</p></li><li><p><code>git status</code> 查看仓库状态</p><p>（查看当前仓库处于哪个分支，有哪些文件及其文件当前处于什么状态）</p></li><li><p><code>git add</code> 添加到暂存区</p></li><li><p><code>git commit</code> 提交</p><p>（<code>git commit -m &quot;提交信息&quot;</code> <strong>-m参数来指定提交的信息</strong>）</p><p><strong>提交文件时只会提交暂存区的文件，而不会提交工作区的文件</strong></p></li></ul><p>创建文件及内容：<code>echo &quot;这是文件的内容&quot; &gt; file.txt</code></p><p>查看文件内容：<code>cat file.txt</code></p><blockquote><p>Untracked files指未被跟踪的文件</p></blockquote><p>把添加到暂存区的文件取消暂存：<code>git rm --cached file</code></p><p>修改文件名称：<code>mv OldFileName NewFileName</code></p><p>把所有<strong>以txt结尾的文件</strong>添加到暂存区：<code>git add *.txt</code></p><p>添加<strong>所有文件</strong>到暂存区：<code>git add .</code></p><blockquote><p>在vim编辑器中使用 <code>i</code> 键进入编辑模式，<code>wq</code>键保存并且退出</p></blockquote><p>提交记录：<code>git log</code></p><blockquote><p>git后可以加入参数，如<code>git log --oneline</code>查看简洁的提交记录</p></blockquote><p>回退版本：<code>git reset</code></p><p><img src="'+g+'" alt=""></p><p>查看暂存区内容：<code>git ls-files</code></p><p>回退到上一个版本：<code>git reset --hard HEAD^</code></p><blockquote><p>当前命令指 回退到上一个版本时，工作区和暂存区的文件都会清除</p><p>head加一个尖角号表示上一个版本</p></blockquote><blockquote><p>查看操作历史：<code>git reflog</code></p><p>如果误操作可以使用<code>git reset --hard 版本号</code>回退到这个版本即可</p></blockquote><p>查看文件差异：<code>git diff</code></p><ul><li>查看工作区，暂存区，本地仓库之间的差异</li><li>查看不同版本之间的差异</li><li>查看不同分支之间的差异</li></ul><p>直接使用git diff命令会默认比较工作区和暂存区之间的差异内容，会显示发生更改的文件以及更改的详细信息（有误）</p><p>使用vim修改文件内容：<code>vi &lt;fileName&gt;</code></p><blockquote><p>vi命令用于打开或者新建文件，并将光标置于第一行</p></blockquote><p><code>git diff</code> <strong>命令显示工作区中已修改但尚未添加到暂存区的文件的差异</strong></p><p><code>git diff HEAD</code> 用来查看当前工作区与**最新提交（HEAD）**之间的差异</p><p>比较暂存区和版本库的差异：<code>git diff --cached</code></p><p>比较特定版本差异：<code>git diff &lt;提交ID&gt; &lt;提交ID&gt;</code></p><p>**<code>head</code>*<em>表示当前分支的最新提交（它指向分支的最新节点）</em></p><p>常用到比较当前版本和上一个版本之间的差异<strong>简便方式</strong>：<code>git diff head~ head</code></p><p>**<code>head~</code>**表示上一个版本</p><p><code>git diff head~2 head</code>表示head之前的第二个版本**？**</p><blockquote><p>后面还可以加上文件名，这样就只会查看这个文件的差异内容了</p></blockquote><p>查看分支之间差异：<code>git diff &lt;branchName&gt; &lt;branchName&gt;</code></p><p><img src="'+r+'" alt=""></p><blockquote><p>图片有误</p></blockquote><p>删除文件命令：<code>rm &lt;fileName&gt;</code></p><p>查看暂存区内容：<code>git ls-files</code></p><p>从工作区和暂存区中删除文件：<code>git rm &lt;fileName&gt;</code></p><p>把文件暂存区中删除，保留工作区：<code>git rm --cached &lt;fileName&gt;</code></p><p>递归删除某个目录下的所有子目录和文件：<code>git rm -r*</code></p><h4 id="gitignore" tabindex="-1">.gitignore <a class="header-anchor" href="#gitignore" aria-label="Permalink to &quot;.gitignore&quot;">​</a></h4><p>忽略文件：让我们忽略一些不应该被加入到版本库中的文件</p><p>忽略文件项：</p><ul><li>系统或者软件自动生成的文件</li><li>编译产生的中间文件和结果文件</li><li>运行时生成日志文件，缓存文件，零时文件</li><li>涉及铭感信息的文件，密码，口令，秘钥等</li></ul><p><code>echo &lt;fileName&gt; &gt; .gitignore</code></p><p><code>*.log</code>匹配所有以log结尾的文件</p><p>两个<code>&gt;&gt;</code> 追加内容：<code>echo &quot;内容&quot; &gt;&gt; &lt;fileName&gt;</code></p><p>查看状态的简略模式：<code>git status -s</code></p><blockquote><p>第一列表示暂存区状态，第二列表示工作区状态</p><p>如果要在.gitignore中忽略某个文件夹，注意文件夹是以斜线结尾的 <code>temp/</code></p></blockquote><p><img src="'+n+'" alt=""></p><h4 id="github-gitignore" tabindex="-1">github/gitignore <a class="header-anchor" href="#github-gitignore" aria-label="Permalink to &quot;github/gitignore&quot;">​</a></h4><p>在GitHub中提供了各种常用的忽略问价模板</p><h4 id="远程仓库" tabindex="-1">远程仓库 <a class="header-anchor" href="#远程仓库" aria-label="Permalink to &quot;远程仓库&quot;">​</a></h4><h5 id="配置ssh密钥" tabindex="-1">配置SSH密钥 <a class="header-anchor" href="#配置ssh密钥" aria-label="Permalink to &quot;配置SSH密钥&quot;">​</a></h5><p>回到用户根目录，进入.ssh目录</p><p>使用<code>ssh-keygen</code>生成密钥</p><p><code>-t rsa</code>表示协议为rsa</p><p><code>-b 4096</code>指定生成大小</p><p><code>ssh-keygen -t rsa -b 4096</code></p><p>如果第一次使用这个命令直接回车就好，它会在我们用户根目录下生成一个id_rsa的密钥文件</p><p>如果之前配置过了ssh密钥，最好不要回车，因为之前生成过了密钥文件，如果再次回车会覆盖文件，且不可逆</p><blockquote><p>生成文件中没有扩展名的就是私钥文件，以.pub的文件就是公钥文件</p></blockquote><p>如果是第一次创建密钥，且创建密钥的时候没有修改过默认文件，配置ssh就到此</p><p>如果指定了一个新的文件名，还需要增加一不配置，创建一个config文件</p><p><img src="'+u+'" alt=""></p><p>意思：当我们访问GitHub时，指定使用SSH下的test密钥</p><p>使用<code>vi config</code> 写入即可</p><p><img src="'+h+'" alt=""></p><p>推送：git push</p><p>拉取：git pull</p><p><img src="'+m+'" alt=""></p><h4 id="关联本地仓库和远程仓库" tabindex="-1">关联本地仓库和远程仓库 <a class="header-anchor" href="#关联本地仓库和远程仓库" aria-label="Permalink to &quot;关联本地仓库和远程仓库&quot;">​</a></h4><p><code>git remote add &lt;shortname&gt; &lt;url&gt;</code>添加远程仓库</p><p><code>git remote -v</code>查看当前仓库对应的远程仓库的别名和地址</p><p><code>git branch -m &lt;main&gt;</code>指定分支的名称为main</p><p><code>git push -u origin &lt;main&gt;</code>将本地main分支和远程origin仓库的main分支关联起来</p><blockquote><p>如果本地分支的名称与远程分支的名称相同的话，省略只写一个main即可</p></blockquote><p><code>git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code>拉取远程仓库的修改的内容</p><h4 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h4><p><code>code .</code>使用vscode打开当前目录</p><p><img src="'+b+'" alt=""></p><p>创建新分支<code>git branch &lt;name&gt;</code></p><p>查看所有分支<code>git branch</code></p><p>切换分支<code>git checkout &lt;name&gt;</code></p><blockquote><p>存在且在问题，git checkout命令还可以用来恢复文件或者目录到之前的某一个状态</p><p>比如意外修改了某个文件，可以使用git checkout 命令来恢复到我们之前修改前的状态</p><p>但是，如果分支名称和文件名称相同的话就会产生歧义，会默认切换分支，而不是恢复文件</p></blockquote><p>新命令切换文件：<code>git switch &lt;name&gt;</code></p><p>将不同分支合并到当前分支中：<code>git merge &lt;将要合并的分支&gt;</code></p><p>查看分支图：<code>git log --graph --oneline --decorate --all</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><blockquote><p>-d参数表示删除<strong>已经完成合并</strong>的分支</p><p>否则使用-D强制删除分支</p></blockquote><h4 id="解决合并冲突" tabindex="-1">解决合并冲突 <a class="header-anchor" href="#解决合并冲突" aria-label="Permalink to &quot;解决合并冲突&quot;">​</a></h4><blockquote><p>指同时修改两个分支的同一个文件，git不知道该保存哪一个</p></blockquote><p>解决方法：手动编辑，留下想要内容，然后再重新提交</p><p>在提交之前中断合并<code>git merge --abort</code>(当不想继续执行操作时可以使用命令来中止合并操作)</p><p><img src="'+q+'" alt=""></p><p>恢复指定时间点的状态<code>git checkout -b &lt;dev&gt; &lt;id&gt;</code></p><p>创建一个新分支并切换到该分支<code>git checkout -b &lt;name&gt;</code></p><p>查看提交ID<code>git log --graph --oneline --decorate --all</code></p><p>定义命令别名：<code>alias &lt;别名&gt; = &quot;命令&quot;</code></p><p>变基分支：<code>git rebase &lt;目标分支&gt;</code></p><p>Merge</p><p>优点：不会破坏原分支的提交历史，方便回溯和查看</p><p>缺点：会产生额外的提交节点，分支图复杂</p><p>Rebase</p><p>优点：不会新增额外的提交记录，形成线性历史，比较直观和干净</p><p>缺点：会改变提交历史，改变了当前分支branch out的节点，<strong>避免在共享分支使用此命令</strong></p><h4 id="分支管理和工作流" tabindex="-1">分支管理和工作流 <a class="header-anchor" href="#分支管理和工作流" aria-label="Permalink to &quot;分支管理和工作流&quot;">​</a></h4><p>GitFlow模型</p><p><img src="'+f+'" alt=""></p><h2 id="评论" tabindex="-1">评论 <a class="header-anchor" href="#评论" aria-label="Permalink to &quot;评论&quot;">​</a></h2>',121)),i(o)])}const A=t(_,[["render",k]]);export{S as __pageData,A as default};
