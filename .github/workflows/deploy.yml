name: Deploy VitePress site to Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # 1. 打包
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Build with VitePress
        run: npm run docs:build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/.vitepress/dist

  # 2. 压缩
  optimize:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: 安装依赖
        run: |
          npm install -g imagemin-cli imagemin-pngquant imagemin-mozjpeg imagemin-gifsicle imagemin-svgo
          npm install cssnano uglify-js @vue/cli --save-dev
          npm install
      - name: 验证依赖安装
        run: |
          npm list imagemin-cli imagemin-pngquant imagemin-mozjpeg imagemin-gifsicle imagemin-svgo cssnano uglify-js @vue/cli
      - name: 压缩图片并保持目录结构
        run: |
          mkdir -p docs/public-optimized
          npx imagemin "docs/.vitepress/dist/**/*.{jpg,jpeg,png,gif,svg}" --plugin=pngquant --plugin=mozjpeg --plugin=gifsicle --plugin=svgo --out-dir=docs/public-optimized
      - name: 替换原始图片为压缩后的图片
        run: |
          rsync -av --delete docs/public-optimized/ docs/.vitepress/dist/
          rm -rf docs/public-optimized
      - name: 最小化 CSS 文件并输出到 dist 目录
        run: |
          mkdir -p docs/.vitepress/dist/css
          find docs/.vitepress/dist -type f -name "*.css" -exec sh -c 'npx cssnano "\$1" -o "docs/.vitepress/dist/css/$(basename "\$1")"' _ {} \;
      - name: 最小化 JS 文件并输出到 dist 目录
        run: |
          mkdir -p docs/.vitepress/dist/js
          find docs/.vitepress/dist -type f -name "*.js" ! -name "*.min.js" -exec sh -c 'npx uglifyjs "\$1" -o "docs/.vitepress/dist/js/$(basename "\$1")"' _ {} \;
      - name: 优化前检查文件大小
        run: find docs/.vitepress/dist -type f \( -name "*.css" -o -name "*.js" -o -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" \) -exec du -h {} \;
      - name: 优化后检查文件大小
        run: find docs/.vitepress/dist -type f \( -name "*.css" -o -name "*.js" -o -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" \) -exec du -h {} \;
      - name: 重新上传构件
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/.vitepress/dist
          name: optimized-artifact # 使用不同的工件名称

  # 3. 部署
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: optimize
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4